package fi.hsl.transitdata.eke_sink


object EkeBinaryParser {


    val MQTT_HEADER_1ST_PART = FieldDefinition(MQTT_HEADER_1ST_PART_OFFSET, MQTT_HEADER_1ST_PART_SIZE, TO_DATE)
    val EKE_TIME = FieldDefinition(EKE_TIME_OFFSET, EKE_TIME_SIZE, BIGENDIAN_TO_DATE)
    val EKE_HUNDRED_OF_SECONDS = FieldDefinition(EKE_HUNDRED_OF_SECONDS_OFFSET, EKE_HUNDRED_OF_SECONDS_SIZE, BIG_ENDIAN_TO_INT)
    val NTP_TIME = FieldDefinition(NTP_TIME_OFFSET, NTP_TIME_SIZE, BIGENDIAN_TO_DATE)
    val NTP_HUNDRED_OF_SECONDS = FieldDefinition(NTP_HUNDRED_OF_SECONDS_OFFSET, NTP_HUNDRED_OF_SECONDS_SIZE, BIG_ENDIAN_TO_INT)
    val INDEX = FieldDefinition(INDEX_OFFSET, INDEX_SIZE, TO_UNSIGNED_INT)
    val RESERVED1 = FieldDefinition(RESERVED1_OFFSET, RESERVED1_SIZE, TO_UNSIGNED_INT)
    val VEHICLE_SHUTTING_DOWN = FieldDefinition(VEHICLE_SHUTTING_DOWN_OFFSET, VEHICLE_SHUTTING_DOWN_SIZE, TO_UNSIGNED_INT)
    val RESERVED2 = FieldDefinition(RESERVED2_OFFSET, RESERVED2_SIZE, TO_UNSIGNED_INT)
    val SPEED = FieldDefinition(SPEED_OFFSET, SPEED_SIZE, TO_FLOAT)
    val ODOMETER = FieldDefinition(ODOMETER_OFFSET, ODOMETER_SIZE, TO_UNSIGNED_INT)
    val RESERVED3 = FieldDefinition(RESERVED3_OFFSET, RESERVED3_SIZE, TO_UNSIGNED_INT)
    val NUMBER_OF_KILOMETERS = FieldDefinition(NUMBER_OF_KILOMETERS_OFFSET, NUMBER_OF_KILOMETERS_SIZE, TO_UNSIGNED_INT)
    val ACCELERATION = FieldDefinition(ACCELERATION_OFFSET, ACCELERATION_SIZE, TO_FLOAT)
    val STANDSTILL = FieldDefinition(STANDSTILL_OFFSET, STANDSTILL_SIZE, TO_UNSIGNED_INT)
    val DOORS_L_OPEN_VEHICLE1 = FieldDefinition(DOORS_L_OPEN_VEHICLE1_OFFSET, DOORS_L_OPEN_VEHICLE1_SIZE, TO_UNSIGNED_INT)
    val DOORS_R_OPEN_VEHICLE1 = FieldDefinition(DOORS_R_OPEN_VEHICLE1_OFFSET, DOORS_R_OPEN_VEHICLE1_SIZE, TO_UNSIGNED_INT)
    val DOORS_L_OPEN_VEHICLE2 = FieldDefinition(DOORS_L_OPEN_VEHICLE2_OFFSET, DOORS_L_OPEN_VEHICLE2_SIZE, TO_UNSIGNED_INT)
    val DOORS_R_OPEN_VEHICLE2 = FieldDefinition(DOORS_R_OPEN_VEHICLE2_OFFSET, DOORS_R_OPEN_VEHICLE2_SIZE, TO_UNSIGNED_INT)
    val DOORS_L_OPEN_VEHICLE3 = FieldDefinition(DOORS_L_OPEN_VEHICLE3_OFFSET, DOORS_L_OPEN_VEHICLE3_SIZE, TO_UNSIGNED_INT)
    val DOORS_R_OPEN_VEHICLE3 = FieldDefinition(DOORS_R_OPEN_VEHICLE3_OFFSET, DOORS_R_OPEN_VEHICLE3_SIZE, TO_UNSIGNED_INT)
    val DOORS_L_OPEN_VEHICLE4 = FieldDefinition(DOORS_L_OPEN_VEHICLE4_OFFSET, DOORS_L_OPEN_VEHICLE4_SIZE, TO_UNSIGNED_INT)
    val DOORS_R_OPEN_VEHICLE4 = FieldDefinition(DOORS_R_OPEN_VEHICLE4_OFFSET, DOORS_R_OPEN_VEHICLE4_SIZE, TO_UNSIGNED_INT)
    val ACTIVE_SETPOINT_SPEED = FieldDefinition(ACTIVE_SETPOINT_SPEED_OFFSET, ACTIVE_SETPOINT_SPEED_SIZE, TO_UNSIGNED_INT)
    val RESERVED4 = FieldDefinition(RESERVED4_OFFSET, RESERVED4_SIZE, TO_UNSIGNED_INT)
    val RESERVED5 = FieldDefinition(RESERVED5_OFFSET, RESERVED5_SIZE, TO_UNSIGNED_INT)
    val TRACTION_LEVER_POSITION = FieldDefinition(TRACTION_LEVER_POSITION_OFFSET, TRACTION_LEVER_POSITION_SIZE, TO_FLOAT)
    val TRACTION_SET_POINT = FieldDefinition(TRACTION_SET_POINT_OFFSET, TRACTION_SET_POINT_SIZE, TO_FLOAT)
    val TRACTION_ACTUAL = FieldDefinition(TRACTION_ACTUAL_OFFSET, TRACTION_ACTUAL_SIZE, TO_FLOAT)
    val TRACTION_MOTOR_1A_POWER = FieldDefinition(TRACTION_MOTOR_1A_POWER_OFFSET, TRACTION_MOTOR_1A_POWER_SIZE, TO_FLOAT)
    val TRACTION_MOTOR_1B_POWER = FieldDefinition(TRACTION_MOTOR_1B_POWER_OFFSET, TRACTION_MOTOR_1B_POWER_SIZE, TO_FLOAT)
    val TRACTION_MOTOR_2A_POWER = FieldDefinition(TRACTION_MOTOR_2A_POWER_OFFSET, TRACTION_MOTOR_2A_POWER_SIZE, TO_FLOAT)
    val TRACTION_MOTOR_2B_POWER = FieldDefinition(TRACTION_MOTOR_2B_POWER_OFFSET, TRACTION_MOTOR_2B_POWER_SIZE, TO_FLOAT)
    val TRACTION_MOTOR_1A_TEMP = FieldDefinition(TRACTION_MOTOR_1A_TEMP_OFFSET, TRACTION_MOTOR_1A_TEMP_SIZE, TO_FLOAT)
    val TRACTION_MOTOR_1B_TEMP = FieldDefinition(TRACTION_MOTOR_1B_TEMP_OFFSET, TRACTION_MOTOR_1B_TEMP_SIZE, TO_FLOAT)
    val TRACTION_MOTOR_2B_TEMP = FieldDefinition(TRACTION_MOTOR_2B_TEMP_OFFSET, TRACTION_MOTOR_2B_TEMP_SIZE, TO_FLOAT)
    val TRACTION_MOTOR_2A_TEMP = FieldDefinition(TRACTION_MOTOR_2A_TEMP_OFFSET, TRACTION_MOTOR_2A_TEMP_SIZE, TO_FLOAT)
    val POWER_CONVERTER_1A_COOLING_WATER_TEMP = FieldDefinition(POWER_CONVERTER_1A_COOLING_WATER_TEMP_OFFSET, POWER_CONVERTER_1A_COOLING_WATER_TEMP_SIZE, TO_FLOAT)
    val POWER_CONVERTER_1B_COOLING_WATER_TEMP = FieldDefinition(POWER_CONVERTER_1B_COOLING_WATER_TEMP_OFFSET, POWER_CONVERTER_1B_COOLING_WATER_TEMP_SIZE, TO_FLOAT)
    val POWER_CONVERTER_2A_COOLING_WATER_TEMP = FieldDefinition(POWER_CONVERTER_2A_COOLING_WATER_TEMP_OFFSET, POWER_CONVERTER_2A_COOLING_WATER_TEMP_SIZE, TO_FLOAT)
    val POWER_CONVERTER_2B_COOLING_WATER_TEMP = FieldDefinition(POWER_CONVERTER_2B_COOLING_WATER_TEMP_OFFSET, POWER_CONVERTER_2B_COOLING_WATER_TEMP_SIZE, TO_FLOAT)
    val MAIN_BRAKE_PIPE_PRESSURE = FieldDefinition(MAIN_BRAKE_PIPE_PRESSURE_OFFSET, MAIN_BRAKE_PIPE_PRESSURE_SIZE, TO_FLOAT)
    val BRAKE_CYLINDER_PRESSURE_AT_AXLE = FieldDefinition(BRAKE_CYLINDER_PRESSURE_AT_AXLE_OFFSET, BRAKE_CYLINDER_PRESSURE_AT_AXLE_SIZE, TO_UNSIGNED_INT_ARRAY)
    val WHEEL_SLIPPAGE_PROTECTION_ACTIVE = FieldDefinition(WHEEL_SLIPPAGE_PROTECTION_ACTIVE_OFFSET, WHEEL_SLIPPAGE_PROTECTION_ACTIVE_SIZE, TO_UNSIGNED_INT)
    val SLIPPAGE_1A = FieldDefinition(SLIPPAGE_1A_OFFSET, SLIPPAGE_1A_SIZE, TO_FLOAT)
    val SLIPPAGE_1B = FieldDefinition(SLIPPAGE_1B_OFFSET, SLIPPAGE_1B_SIZE, TO_FLOAT)
    val SLIPPAGE_2A = FieldDefinition(SLIPPAGE_2A_OFFSET, SLIPPAGE_2A_SIZE, TO_FLOAT)
    val SLIPPAGE_2B = FieldDefinition(SLIPPAGE_2B_OFFSET, SLIPPAGE_2B_SIZE, TO_FLOAT)
    val ENERGY_CONSUMPTION = FieldDefinition(ENERGY_CONSUMPTION_OFFSET, ENERGY_CONSUMPTION_SIZE, TO_UNSIGNED_INT)
    val ENERGY_RECUPERATION = FieldDefinition(ENERGY_RECUPERATION_OFFSET, ENERGY_RECUPERATION_SIZE, TO_UNSIGNED_INT)
    val CATENARY_VOLTAGE = FieldDefinition(CATENARY_VOLTAGE_OFFSET, CATENARY_VOLTAGE_SIZE, TO_UNSIGNED_INT)
    val INSIDE_TEMP_COACH_A = FieldDefinition(INSIDE_TEMP_COACH_A_OFFSET, INSIDE_TEMP_COACH_A_SIZE, TO_UNSIGNED_INT)
    val INSIDE_TEMP_COACH_B = FieldDefinition(INSIDE_TEMP_COACH_B_OFFSET, INSIDE_TEMP_COACH_B_SIZE, TO_UNSIGNED_INT)
    val INSIDE_TEMP_COACH_C = FieldDefinition(INSIDE_TEMP_COACH_C_OFFSET, INSIDE_TEMP_COACH_C_SIZE, TO_UNSIGNED_INT)
    val INSIDE_TEMP_COACH_D = FieldDefinition(INSIDE_TEMP_COACH_D_OFFSET, INSIDE_TEMP_COACH_D_SIZE, TO_UNSIGNED_INT)
    val TOILET_FRESH_WATER_LEVEL = FieldDefinition(TOILET_FRESH_WATER_LEVEL_OFFSET, TOILET_FRESH_WATER_LEVEL_SIZE, TO_UNSIGNED_INT)
    val TOILET_WASTE_WATER_LEVEL = FieldDefinition(TOILET_WASTE_WATER_LEVEL_OFFSET, TOILET_WASTE_WATER_LEVEL_SIZE, TO_UNSIGNED_INT)
    val FLAGS = FieldDefinition(FLAGS_OFFSET, FLAGS_SIZE, TO_UNSIGNED_INT_ARRAY)
    val NUMBER_OF_VEHICLES = FieldDefinition(NUMBER_OF_VEHICLES_OFFSET, NUMBER_OF_VEHICLES_SIZE, TO_UNSIGNED_INT)
    val VEHICLE_POS_IN_TRAIN = FieldDefinition(VEHICLE_POS_IN_TRAIN_OFFSET, VEHICLE_POS_IN_TRAIN_SIZE, TO_UNSIGNED_INT)
    val VEHICLE_NUMBER = FieldDefinition(VEHICLE_NUMBER_OFFSET, VEHICLE_NUMBER_SIZE, TO_UNSIGNED_INT)
    val ORIENTATION_VEHICLE = FieldDefinition(ORIENTATION_VEHICLE_OFFSET, ORIENTATION_VEHICLE_SIZE, TO_UNSIGNED_INT)
    val EMERGENCY_BRAKE = FieldDefinition(EMERGENCY_BRAKE_OFFSET, EMERGENCY_BRAKE_SIZE, TO_UNSIGNED_INT)
    val SHOW_IMAGE_OF_CAMERA_N = FieldDefinition(SHOW_IMAGE_OF_CAMERA_N_OFFSET, SHOW_IMAGE_OF_CAMERA_N_SIZE, TO_UNSIGNED_INT)
    val SHOW_IMAGE_OF_VEHICLE_N = FieldDefinition(SHOW_IMAGE_OF_VEHICLE_N_OFFSET, SHOW_IMAGE_OF_VEHICLE_N_SIZE, TO_UNSIGNED_INT)
    val OUTSIDE_TEMP = FieldDefinition(OUTSIDE_TEMP_OFFSET, OUTSIDE_TEMP_SIZE, TO_INT)
    val TRAIN_NUMBER = FieldDefinition(TRAIN_NUMBER_OFFSET, TRAIN_NUMBER_SIZE, TO_UNSIGNED_INT)
    val GPS_SPEED = FieldDefinition(GPS_SPEED_OFFSET, GPS_SPEED_SIZE, TO_UNSIGNED_INT)
    val RESERVED6 = FieldDefinition(RESERVED6_OFFSET, RESERVED6_SIZE, TO_UNSIGNED_INT)
    val GPSX = FieldDefinition(GPSX_OFFSET, GPSX_SIZE, TO_UNSIGNED_INT)
    val GPSY = FieldDefinition(GPSY_OFFSET, GPSY_SIZE, TO_FLOAT)
    val TIME = FieldDefinition(TIME_OFFSET, TIME_SIZE, TO_UNSIGNED_INT)
    

    /*fun toMessageDTO(rawData : ByteArray) : MessageDTO{
        return MessageDTO(
            rawData,
            rawData.readField(INDEX),
            rawData.readField(TIMESTAMP),
            rawData.readField(TRAIN_NUMBER),
            rawData.readField(SPEED)
        )
    }*/

}